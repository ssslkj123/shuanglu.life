<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Shuanglu的博客</title>
    <link>https://shuanglu.life/post/</link>
    <description>Recent content in Posts on Shuanglu的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 06 Feb 2024 19:59:37 +0800</lastBuildDate>
    <atom:link href="https://shuanglu.life/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>20240206_github大文件commit</title>
      <link>https://shuanglu.life/post/20240206_github%E5%A4%A7%E6%96%87%E4%BB%B6commit/</link>
      <pubDate>Tue, 06 Feb 2024 19:59:37 +0800</pubDate>
      <guid>https://shuanglu.life/post/20240206_github%E5%A4%A7%E6%96%87%E4%BB%B6commit/</guid>
      <description>关于在github上遇到上传的单个文件超过其限制的100MB时的处理 1. github 对于单个文件上传的大小是有限制的 详见：[About size limits on GitHub][https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#about-size-limits-on-github] 其表现则体现为push过程当中的错误（我这里使用的是git的remote，而非http的remote） （如果是https的remote 可能有所不同。）</description>
    </item>
    <item>
      <title>20240110_golang排序</title>
      <link>https://shuanglu.life/post/20240110_golang%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 10 Jan 2024 19:59:37 +0800</pubDate>
      <guid>https://shuanglu.life/post/20240110_golang%E6%8E%92%E5%BA%8F/</guid>
      <description>Golang排序 排序算法可以分为内部排序和外部排序。 其中：内部排序是指在内存中对数据进行排序，而外部排序是因为数据量较大，无法一次性放入内存，因此需要访问外部存储。 以下是十种常见的排序算法，具有不同的特点、时间复杂度和稳定性： 1. 冒泡排序（Bubble Sort）： 通过多次比较和交换</description>
    </item>
    <item>
      <title>20230807_eci与swagent问题处置方式</title>
      <link>https://shuanglu.life/post/20230807_eci%E4%B8%8Eswagent%E9%97%AE%E9%A2%98%E5%A4%84%E7%BD%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 07 Aug 2023 11:39:44 +0800</pubDate>
      <guid>https://shuanglu.life/post/20230807_eci%E4%B8%8Eswagent%E9%97%AE%E9%A2%98%E5%A4%84%E7%BD%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>20230807_eci与swagent问题处置方式 tag: skywalking-swck-mutating-webhook-configuration 一、问题现象 使用ECI作为弹性容器过程当中因为阿里云ECI容器会对部署的pod触发patch annotation操作如下： 而在此eci 控制器patch 之前 skywalking-swck-controller-manager 控制器会对namespace 带标签swck-injection=en</description>
    </item>
    <item>
      <title>20230727_velero备份迁移kubernetes集群</title>
      <link>https://shuanglu.life/post/20230727_velero%E5%A4%87%E4%BB%BD%E8%BF%81%E7%A7%BBkubernetes%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Thu, 27 Jul 2023 19:41:56 +0800</pubDate>
      <guid>https://shuanglu.life/post/20230727_velero%E5%A4%87%E4%BB%BD%E8%BF%81%E7%A7%BBkubernetes%E9%9B%86%E7%BE%A4/</guid>
      <description>一、velero安装 1# wget https://github.com/vmware-tanzu/velero/releases/download/v1.11.1/velero-v1.11.1-linux-amd64.tar.gz 2# tar -zxvf velero-v1.11.1-linux-amd64.tar.gz 3# cp -av velero /usr/bin/ 4 5#velero -h 6# 启用命令补全 7# source &amp;lt;(velero completion bash) 8# velero completion bash &amp;gt; /etc/bash_completion.d/velero 1# cat &amp;gt; credentials-velero &amp;lt;&amp;lt;EOF 2[default] 3aws_access_key_id = admin 4aws_secret_access_key = P@ssw0rd 5EOF 6 7# velero install \ 8 --provider aws \ 9 --image velero/velero:v1.11.1 \ 10 --plugins velero/velero-plugin-for-aws:v1.6.0 \ 11 --bucket velero \ 12 --secret-file ./credentials-velero \ 13 --use-node-agent \ 14 --use-volume-snapshots=false \ 15 --namespace velero \ 16 --backup-location-config region=minio,s3ForcePathStyle=&amp;#34;true&amp;#34;,s3Url=http://192.168.31.110:9000 \ 17 --wait 18 19 --prefix /cce-test 二、卸载 1kubectl delete namespace/velero clusterrolebinding/velero 2kubectl delete crds -l component=velero 三、执行velero 备份与恢复 1# 不执行存储pvc内容</description>
    </item>
    <item>
      <title>20230309_KuriseRollout灰度发布</title>
      <link>https://shuanglu.life/post/20230309_KuriseRollout%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</link>
      <pubDate>Thu, 09 Mar 2023 21:49:00 +0800</pubDate>
      <guid>https://shuanglu.life/post/20230309_KuriseRollout%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83/</guid>
      <description>一、架构设计： Kruise rollout 是一个Bypass的旁路组件， 其主要功能是为标准的Kubernetes Deployment、Statefuset以及 openKurise Cloneset这类工作负载进行提供高级部署功能而存在的，其中提供的高级部署功能包含： 金丝雀灰度、流量路由和渐进式交付。 其中关于原生的Kuber</description>
    </item>
    <item>
      <title>20230113_docker.sock构建镜像</title>
      <link>https://shuanglu.life/post/20230113_docker.sock%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/</link>
      <pubDate>Fri, 13 Jan 2023 22:09:11 +0800</pubDate>
      <guid>https://shuanglu.life/post/20230113_docker.sock%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/</guid>
      <description>一、systemd方式提供docker sock不足 节点需要额外安装 docker-ce 的服务组件，后期扩容node节点需要额外定制，相对麻烦 管理node进程状态麻烦，运行日志，进程挂掉等需要人为干预，升级也需要手动操作。 docker in pod 可以独立运行与管理自己的containerd 与docker 进程，与宿主机</description>
    </item>
    <item>
      <title>20220523_服务器基准测试</title>
      <link>https://shuanglu.life/post/20220523_%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 23 May 2022 10:59:37 +0800</pubDate>
      <guid>https://shuanglu.life/post/20220523_%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>一、CPU 基准性能测试 1.1 关于CPU频率 CPU 最核心的指标是主频，也就是 CPU 内核工作的主时钟频率。基频（Base Frequency）是指在普通状态，BIOS 关闭 Turbo 的时候，CPU 的最高频率不会超过的某个值，通常记为 P1。睿频（Turbo Frequency）指的是基频（P1）以上的频率，有两</description>
    </item>
    <item>
      <title>20210402_Linux内核参数之arp_ignore和arp_announce</title>
      <link>https://shuanglu.life/post/20210402_Linux%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%B9%8Barp_ignore%E5%92%8Carp_announce/</link>
      <pubDate>Tue, 29 Mar 2022 18:44:19 +0800</pubDate>
      <guid>https://shuanglu.life/post/20210402_Linux%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%B9%8Barp_ignore%E5%92%8Carp_announce/</guid>
      <description>Linux内核参数之arp_ignore和arp_announce 一、arp_ignore和arp_announce介绍 arp_ignore和arp_announce参数都和ARP协议相关，主要用于控制系统返回arp响应和发送arp请求时的动作。这两个参数很重要，特别是在LVS的</description>
    </item>
    <item>
      <title>20210729_harbor对接S3对象存储</title>
      <link>https://shuanglu.life/post/20210729_harbor%E5%AF%B9%E6%8E%A5S3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sun, 01 Aug 2021 15:51:44 +0800</pubDate>
      <guid>https://shuanglu.life/post/20210729_harbor%E5%AF%B9%E6%8E%A5S3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/</guid>
      <description>前序： ​ 为何要使用S3对象存储作为harbor的后端，S3存储的优势在于对于docker镜像而言，一个镜像会有N个层，而每一个层所对应的存储结构上就是一个文件，当镜像仓库存储了大量的镜像之后，如果使用文件系统作为harbor的后端势必在超大型的镜像规模下因文件层数与单文件夹下文件</description>
    </item>
    <item>
      <title>20210719_etcd备份异地恢复操作</title>
      <link>https://shuanglu.life/post/20210719_etcd%E5%A4%87%E4%BB%BD%E5%BC%82%E5%9C%B0%E6%81%A2%E5%A4%8D%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 22 Jul 2021 19:41:56 +0800</pubDate>
      <guid>https://shuanglu.life/post/20210719_etcd%E5%A4%87%E4%BB%BD%E5%BC%82%E5%9C%B0%E6%81%A2%E5%A4%8D%E6%93%8D%E4%BD%9C/</guid>
      <description>背景： ​ kubernetes集群在使用过程当中由于其承载的etcd出现性能瓶颈，因而需要将etcd的全量数据集中迁移至新的etcd集群当中，关于etcd的迁移有多种形式，因为考虑到新etcd集群与原etcd集群之间网络延迟与稳定性，因而使用了停机的全量迁移方式，经过验证停机时间可</description>
    </item>
    <item>
      <title>20210715_hugepage和hugetlb透明大页的概念</title>
      <link>https://shuanglu.life/post/20210715_hugepage%E5%92%8Chugetlb%E9%80%8F%E6%98%8E%E5%A4%A7%E9%A1%B5%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Thu, 15 Jul 2021 13:03:24 +0800</pubDate>
      <guid>https://shuanglu.life/post/20210715_hugepage%E5%92%8Chugetlb%E9%80%8F%E6%98%8E%E5%A4%A7%E9%A1%B5%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>一、关于Hugepage和hugetlb(transparent huge page) 当中涉及的概念： 1、mmu ，memory management unit ，处理VA（virtual memory address） 到PA（ physical memory address） 之间的转换，mmu是一张表，有虚拟内存到物理内存的对应关系，最核心的是Page Table（页表）</description>
    </item>
    <item>
      <title>20210708_kubernetes.default集群默认服务不可用问题处理</title>
      <link>https://shuanglu.life/post/20210708_kubernetes.default%E9%9B%86%E7%BE%A4%E9%BB%98%E8%AE%A4%E6%9C%8D%E5%8A%A1%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</link>
      <pubDate>Thu, 08 Jul 2021 15:32:48 +0800</pubDate>
      <guid>https://shuanglu.life/post/20210708_kubernetes.default%E9%9B%86%E7%BE%A4%E9%BB%98%E8%AE%A4%E6%9C%8D%E5%8A%A1%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</guid>
      <description>起因： 升级集群从1.15.4-&amp;gt;1.16.8过程当中发现再default命名空间下的kubernetes服务出现随机性不可访问的问题，错误提示 Failed connect to 10.254.0.1:443; Connection refused 该问题导致有些通过集群kubernetes.default的服务无法与apiserver进行同行导致无法启动，如官方提供</description>
    </item>
    <item>
      <title>20210625_harbor_retention_500错误处理</title>
      <link>https://shuanglu.life/post/20210625_harbor_retention_500%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 05 Jul 2021 18:51:40 +0800</pubDate>
      <guid>https://shuanglu.life/post/20210625_harbor_retention_500%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>背景 harbor 1.9.X 升级到1.10.X之后使用项目当中的tag保留功能会有bug，无法进行镜像的删除，并且也无法删除曾经创建的保留规则。如果需要进行tag保留功能的使用，需要手动将原有的tag保留规则删除后再重新创建，即可恢复。 进入postgresql的 容器 1docker exec -it harbor-db /bin/bash 2连接本地数据库 3 4psql -U postgres</description>
    </item>
    <item>
      <title>20200826_证书转换</title>
      <link>https://shuanglu.life/post/20200826_%E8%AF%81%E4%B9%A6%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 05 Jul 2021 17:33:46 +0800</pubDate>
      <guid>https://shuanglu.life/post/20200826_%E8%AF%81%E4%B9%A6%E8%BD%AC%E6%8D%A2/</guid>
      <description>前言： Windows 当中通常证书所使用的格式是pfx证书，pfx证书通常会附带公钥与私钥.即有Public key Cryptography Standards #12 ，PKCS#12来进行了标准定义，包涵公钥与私钥的二进制证书形式，其结尾通常为pfx 或 p12而cer或者Base64是只包涵二进制编码的证书，且只会包涵公钥。且文件以cer作为结</description>
    </item>
    <item>
      <title>20201208_nginx缓冲区参数配置优化</title>
      <link>https://shuanglu.life/post/20201208_nginx%E7%BC%93%E5%86%B2%E5%8C%BA%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 05 Jul 2021 14:25:25 +0800</pubDate>
      <guid>https://shuanglu.life/post/20201208_nginx%E7%BC%93%E5%86%B2%E5%8C%BA%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</guid>
      <description>nginx缓冲区优化 关于缓冲, 主要是合理设置缓冲区大小, 尽量避免缓冲到硬盘时的情况 proxy_buffering proxy_buffering这个参数用来控制是否打开后端响应内容的缓冲区，如果这个设置为off，那么proxy_buffers和proxy_busy_buffers_size这两个指令将会失效。</description>
    </item>
  </channel>
</rss>
